# Task to Install CC
---

   - name: Creating log file
     become: no
     file: dest=/tmp/ansible_logs/logs_install_cc.txt state=touch
     delegate_to: localhost

   - name: Ensure pip3 is installed
     shell: |
       yum install -y python3-pip
     become: yes

   - name: Install boto3 and botocore using pip3
     shell: |
       pip3 install boto3 botocore
     become: yes

   - name: Copy Installer Package from S3
     aws_s3:
       bucket: "{{ s3_bucket }}"
       object: "{{ s3_object }}"
       dest: "{{ dest_file_path }}/{{ cc_package }}"
       mode: get
     register: s3_download

   - name: Copy and extract Installer Package
     unarchive:
       src: '{{ src_file_path }}/{{ cc_package }}'
       dest: '{{ dest_file_path }}'
       owner: '{{ ai_user }}'
       group: '{{ ai_grp }}'
       mode: 0775
       remote_src: yes
     register: unarchive

   - name: Updating log file
     become: no
     lineinfile: dest=/tmp/ansible_logs/logs_install_cc.txt state=present line='- CC Package copy and extract Completed\n'
     when: unarchive is success
     delegate_to: localhost


   - name: Create CC Install and Deployment directories if they don't exist
     become: yes
     become_user: '{{ ai_user }}'
     file:
       path: '{{ item }}'
       state: directory
       owner: '{{ ai_user }}'
       group: '{{ ai_grp }}'
       mode: 0755
     with_items:
       - '{{ cc_install_path }}'
       - '{{ cc_deploy_root }}'


   - name: Installing CC
     become: yes
     become_user: '{{ ai_user }}'
     shell: |
        source '{{ env_src_file }}'
        pkg='{{ cc_package }}'
        cd {{ dest_file_path }}/`echo $pkg | awk -F ".tar" '{print $1}'`
        ./cc-install.ksh -install-root '{{ cc_install_path }}'
     args:
         creates: '{{ cc_install_path }}/{{ cc_instance }}-{{ cc_ver_num }}'
     register: installerStatus

   - name: Updating log file
     become: no
     lineinfile: dest=/tmp/ansible_logs/logs_install_cc.txt state=present line='- CC Installer ran successfully\n'
     when: installerStatus is success
     delegate_to: localhost


   - name: Copy Control> Center setup.properties
     template:
       src: ./../templates/setup.properties.j2
       dest: '{{ cc_install_path }}/setup.properties'
       owner: '{{ ai_user }}'
       group: '{{ ai_grp }}'
       mode: 0775

   - name: Creating Control> Center War file
     become: yes
     become_user: '{{ ai_user }}'
     shell: |
        source '{{ env_src_file }}'
        export AB_CC_HOME='{{ cc_install_path }}/controlcenter-{{ cc_ver_num }}'
        export AB_CC_LOCAL_ROOT='{{ cc_deploy_root }}'
        ${AB_CC_HOME}/bin/cc-admin create {{ cc_instance }} -from {{ cc_install_path }}/setup.properties -batch true
     register: deployment

   - name: Updating log file
     become: no
     lineinfile: dest=/tmp/ansible_logs/logs_install_cc.txt  state=present line='- Deployment ran successfully\n'
     when: deployment is success
     delegate_to: localhost


   - name: Copy war file from control machine to the web host
     become: yes
     copy:
       src: '{{ cc_deploy_root }}/{{ cc_instance }}/controlcenter-{{ cc_ver_num }}.war'
       dest: '{{ application_dest }}/{{ cc_instance }}.war'
       owner: "{{ ai_user }}"
       group: "{{ ai_grp }}"
     delegate_to: '{{ web_host }}'
     when: app_type != 'ab-app'
     register: warFileupload


   - name: Updating log file
     become: no
     lineinfile: dest=/tmp/ansible_logs/logs_install_cc.txt  state=present line='- War file deployed in Web application Server\n'
     when: warFileupload is success
     delegate_to: localhost


   - name: Display message of Successful completion
     debug:
       msg:
       - 'CC war file is created and and placed at below location'
       - 'Path: {{ cc_deploy_root }}/{{ cc_instance }}'

   - name: Setting the reporter Configuration
     become: yes
     become_user: '{{ ai_user }}'
     shell: |
        source '{{ env_src_file }}'
        ab-reporter start -wss-username ocagent -wss-encrypted-password {{ reporter_config_password }}


   - name: Add AB_OPS_CONSOLE_URL in abinitiorc
     become: yes
     become_user: '{{ ai_user }}'
     blockinfile:
       path: '{{ ab_home_path }}/config/abinitiorc'
       backup: yes
       insertafter: EOF
       block: |
          AB_OPS_CONSOLE_URL : {{ app_protocol }}://{{ web_host }}:{{ app_port }}/{{ cc_instance }}

